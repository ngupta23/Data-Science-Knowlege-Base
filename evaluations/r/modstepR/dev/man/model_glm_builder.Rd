% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_glm_builder.R
\name{model_glm_builder}
\alias{model_glm_builder}
\title{R6 model_glm_builder class}
\description{
R6 model_glm_builder class

R6 model_glm_builder class
}
\examples{

RMSE = function(m, o){ sqrt(mean((m - o)^2)) }   # Define Metric

mod_base = lm(mpg~., data = mtcars)     # Base Linear Regression Model
pred_base = predict(mod_base, mtcars)            # Predictions with base learner
print(RMSE(pred_base,mtcars$mpg))

mod = model_glm_builder$new(arFormula = mpg~., arData = mtcars,
                            arStartOrder = 2, arLoops = 3)  # LM Builder Model
print(mod$get_formula())                                    # Formula built from base features
pred = mod$predict(mtcars)                                  # Predictions with LM Builder model
print(RMSE(pred,mtcars$mpg))

# Passing 'other' arguments to linear model call (e.g. weights)
mod = model_glm_builder$new(arFormula = mpg~., arData = mtcars,
                            arStartOrder = 2, arLoops = 3, weights = mtcars$mpg)

# Logistic Regression problem (including categorical predictors)
library(titanic)
library(magrittr)

data = titanic::titanic_train \%>\%
  dplyr::select(dplyr::one_of("Survived","Age","SibSp","Parch",
                              "Fare","Pclass","Sex","Embarked")) \%>\%
  na.omit()

mod = model_glm_builder$new(arFormula = Survived~., arData = data, arType = 'class',
                            arStartOrder = 2, arFilterThresh = 0.5)
pred = mod$predict(data)
acc = Metrics::accuracy(data$Survived, pred)
print(acc)

summary(mod$get_model())

# Example with increased iteration limits (to solve convergence issues)
mod = model_glm_builder$new(arFormula = Survived~., arData = data, arType = 'class',
                            arStartOrder = 2, arLoops = 6, arFilterThresh = 0.1,
                            control = list(maxit = 5000))
}
\section{Super classes}{
\code{\link[modstepR:model]{modstepR::model}} -> \code{\link[modstepR:model_glm_1]{modstepR::model_glm_1}} -> \code{model_glm_builder}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{model_glm_builder$new()}}
\item \href{#method-clone}{\code{model_glm_builder$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="modstepR" data-topic="model" data-id="get_formula">}\href{../../modstepR/html/model.html#method-get_formula}{\code{modstepR::model$get_formula()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="modstepR" data-topic="model" data-id="get_model">}\href{../../modstepR/html/model.html#method-get_model}{\code{modstepR::model$get_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="modstepR" data-topic="model" data-id="print">}\href{../../modstepR/html/model.html#method-print}{\code{modstepR::model$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="modstepR" data-topic="model_glm_1" data-id="predict">}\href{../../modstepR/html/model_glm_1.html#method-predict}{\code{modstepR::model_glm_1$predict()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Create a new `model_glm_builder` object.
Used to develop the stepwise linear/logistic regression model
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{model_glm_builder$new(
  arFormula = NA,
  arData = NA,
  arType = "reg",
  arStartOrder = 1,
  arFilterThresh = 0.05,
  arLoops = 3,
  arMetricFunc = NA,
  arMetricMaximize = NA,
  arVerbose = 0,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{arFormula}}{Formula to use. Currently only supports
(1) something like DV ~ .
(2) one DV only}

\item{\code{arData}}{Dataframe containing the Independent Variables (IV) the Dependent Variable (DV)}

\item{\code{arType}}{Specify whether you want to build
(1) a regression model ('reg') or
(2) a classification model ('class')
For classification problems, this currently only supports binary classification problems
Also, the levels must be coded 0 and 1 for now.}

\item{\code{arStartOrder}}{Model developments starts from this order. For example
1 for 1st order model,
2 for second order model contained 2 variable interactions, etc.}

\item{\code{arFilterThresh}}{p-value to use for keeping important variables in the model  #'}

\item{\code{arLoops}}{Number of loops to go over the variables}

\item{\code{arMetricFunc}}{Custom Metric Function to be used for model development. Defaults to
Metrics::rmse() for regression problems, and
Metrics::accuracy() for classification problems}

\item{\code{arMetricMaximize}}{If a custom metric function is specified, should it be maximized?}

\item{\code{arVerbose}}{Progress Reporting
0 = No Print
1 = Minimal printing
2 = Detailed printing
3 = Debug Mode only}

\item{\code{...}}{Any additional argument that needs to be passed to the underlying glm model call
Examples can include 'weights', 'control', etc.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `model_glm_builder` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{model_glm_builder$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
